@startuml arduino_uno_flight_controller_simple_loop
start
while (true)

: Collect gyro input;
: Transform gyro values into correct coordinate system;
: get orientation from acc sensor;
: get pitch level adjust;
: get roll level adjust;

partition startup {
if (throttle on min value && yaw to the left?) then (yes)
    : set start = 1;
else (no)
endif

if (start = 1 && throttle on min value && yaw to the middle?) then (yes)
    : set start = 2;
    : Reset pid values;
    :Start engines;
else (no)
endif
}
partition shutdown {
if (start = 2 && throttle on min value && yaw to the right?) then (yes)
    :Stop engines;
else (no)
endif
}


partition PID {
    : set roll to zero;
    : Get roll wish from remote with deadband of 16 us;
    : Set pitch wish based on level adjust wish;
    : set yaw to zero;
    : Get yaw wish from remote with deadband of 16 us;

    : update pid controller values;
    : Get battery voltage to compensate voltage drain;
}


partition InputHandling {
    : Read in throttle wish from remote;
    : Limit the throttle to min max [1000, 2000] us;
}

partition Steering {
    : Calculate the esc 1,2,3,4 values based on the input;
    : Ignore pid;

    ://front right is 
    esc_1 = throttle + roll - pitch + yaw;
    ://rear right is 
    esc_2 = throttle + roll + pitch - yaw;
    ://rear left is 
    esc_3 = throttle - roll + pitch + yaw;
    ://front left
    esc_4 = throttle - roll - pitch - yaw;

    :Limit the esc value to [1000, 2000] us;
}


partition DeadlineRTDetector {
    : Check if the period and the runtime exceeds 4050 us if so flash red LED;
    while (looptime < 4000us)
        : Wait;
    endwhile
}

: read gyro and remote values;

partition EngineDriver {
    : Set all PINS to high
        (Pin 4,5,6,7);
    : Calculate the loop time;
    :timer_channel_1 = esc_1 + loop_timer;
    :timer_channel_2 = esc_2 + loop_timer;
    :timer_channel_3 = esc_3 + loop_timer;
    :timer_channel_4 = esc_4 + loop_timer;

}


endwhile 


stop
@enduml